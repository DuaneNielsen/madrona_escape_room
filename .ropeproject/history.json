[[["ChangeSet", ["Renaming <BEAM_0> to <LEFTMOST>", [["ChangeContents", ["train_src/madrona_escape_room_learn/sim_interface_adapter.py", "\"\"\"\nSimple SimInterface adapter for Madrona escape room training.\n\"\"\"\n\nimport madrona_escape_room\n\nfrom .cfg import SimInterface\n\n\nclass DepthIndex:\n    \"\"\"Depth tensor indices for horizontal lidar\"\"\"\n\n    # For tensor shape [worlds, agents, height, width, channels]\n    HEIGHT_DIM = 2  # Height dimension index\n    WIDTH_DIM = 3  # Width dimension index (beam index)\n    CHANNEL_DIM = 4  # Channel dimension index\n\n    # For horizontal lidar [worlds, agents, 1, 128, 1]\n    LEFTMOST = 0  # First lidar beam (leftmost)\n    BEAM_64 = 64  # Middle lidar beam (center)\n    BEAM_127 = 127  # Last lidar beam (rightmost)\n\n    @staticmethod\n    def beam_count():\n        \"\"\"Total number of lidar beams for horizontal lidar\"\"\"\n        return 128\n\n\nclass CompassIndex:\n    \"\"\"Compass tensor bucket indices (128-bucket one-hot encoding)\"\"\"\n\n    COMPASS_0 = 0  # First compass bucket (0/128)\n    COMPASS_64 = 64  # Middle compass bucket (64/128) - North\n    COMPASS_127 = 127  # Last compass bucket (127/128)\n\n    @staticmethod\n    def bucket_count():\n        \"\"\"Total number of compass buckets\"\"\"\n        return 128\n\n\nclass SelfObsIndex:\n    \"\"\"Indices for self observation tensor components\"\"\"\n\n    X = 0  # Position X coordinate\n    Y = 1  # Position Y coordinate\n    Z = 2  # Position Z coordinate\n    PROGRESS = 3  # Progress (maxY reached)\n    ROTATION = 4  # Agent rotation\n\n\nclass ObsIndex:\n    \"\"\"Observation tensor indices for SimInterface.obs list\"\"\"\n\n    SELF_OBS = 0  # Self observation tensor [worlds, agents, 5]\n    COMPASS = 1  # Compass tensor [worlds, agents, 128]\n    DEPTH = 2  # Depth tensor [worlds, agents, height, width, channels]\n\n\ndef create_sim_interface(manager: madrona_escape_room.SimManager) -> SimInterface:\n    \"\"\"Create SimInterface from SimManager with live tensor references.\"\"\"\n\n    return SimInterface(\n        step=manager.step,\n        obs=[\n            manager.self_observation_tensor().to_torch(),  # [worlds, agents, 5]\n            manager.compass_tensor().to_torch(),  # [worlds, agents, 128]\n            manager.depth_tensor().to_torch(),  # [worlds, agents, 128, 1]\n        ],\n        actions=manager.action_tensor().to_torch(),  # [worlds, 3]\n        dones=manager.done_tensor().to_torch(),  # [worlds, agents, 1]\n        rewards=manager.reward_tensor().to_torch(),  # [worlds, agents, 1]\n    )\n\n\ndef create_training_sim(num_worlds: int, exec_mode, gpu_id: int = -1) -> SimInterface:\n    \"\"\"Create simulator for training with 128x1 horizontal lidar depth.\"\"\"\n    # Use the 128x1 horizontal lidar depth sensor\n    depth_config = madrona_escape_room.sensor_config.SensorConfig.lidar_horizontal_128()\n\n    manager = madrona_escape_room.SimManager(\n        exec_mode=exec_mode,\n        gpu_id=gpu_id,\n        num_worlds=num_worlds,\n        rand_seed=42,\n        auto_reset=True,\n        **depth_config.to_manager_kwargs(),\n    )\n\n    return create_sim_interface(manager)\n", "\"\"\"\nSimple SimInterface adapter for Madrona escape room training.\n\"\"\"\n\nimport madrona_escape_room\n\nfrom .cfg import SimInterface\n\n\nclass DepthIndex:\n    \"\"\"Depth tensor indices for horizontal lidar\"\"\"\n\n    # For tensor shape [worlds, agents, height, width, channels]\n    HEIGHT_DIM = 2  # Height dimension index\n    WIDTH_DIM = 3  # Width dimension index (beam index)\n    CHANNEL_DIM = 4  # Channel dimension index\n\n    # For horizontal lidar [worlds, agents, 1, 128, 1]\n    BEAM_0 = 0  # First lidar beam (leftmost)\n    BEAM_64 = 64  # Middle lidar beam (center)\n    BEAM_127 = 127  # Last lidar beam (rightmost)\n\n    @staticmethod\n    def beam_count():\n        \"\"\"Total number of lidar beams for horizontal lidar\"\"\"\n        return 128\n\n\nclass CompassIndex:\n    \"\"\"Compass tensor bucket indices (128-bucket one-hot encoding)\"\"\"\n\n    COMPASS_0 = 0  # First compass bucket (0/128)\n    COMPASS_64 = 64  # Middle compass bucket (64/128) - North\n    COMPASS_127 = 127  # Last compass bucket (127/128)\n\n    @staticmethod\n    def bucket_count():\n        \"\"\"Total number of compass buckets\"\"\"\n        return 128\n\n\nclass SelfObsIndex:\n    \"\"\"Indices for self observation tensor components\"\"\"\n\n    X = 0  # Position X coordinate\n    Y = 1  # Position Y coordinate\n    Z = 2  # Position Z coordinate\n    PROGRESS = 3  # Progress (maxY reached)\n    ROTATION = 4  # Agent rotation\n\n\nclass ObsIndex:\n    \"\"\"Observation tensor indices for SimInterface.obs list\"\"\"\n\n    SELF_OBS = 0  # Self observation tensor [worlds, agents, 5]\n    COMPASS = 1  # Compass tensor [worlds, agents, 128]\n    DEPTH = 2  # Depth tensor [worlds, agents, height, width, channels]\n\n\ndef create_sim_interface(manager: madrona_escape_room.SimManager) -> SimInterface:\n    \"\"\"Create SimInterface from SimManager with live tensor references.\"\"\"\n\n    return SimInterface(\n        step=manager.step,\n        obs=[\n            manager.self_observation_tensor().to_torch(),  # [worlds, agents, 5]\n            manager.compass_tensor().to_torch(),  # [worlds, agents, 128]\n            manager.depth_tensor().to_torch(),  # [worlds, agents, 128, 1]\n        ],\n        actions=manager.action_tensor().to_torch(),  # [worlds, 3]\n        dones=manager.done_tensor().to_torch(),  # [worlds, agents, 1]\n        rewards=manager.reward_tensor().to_torch(),  # [worlds, agents, 1]\n    )\n\n\ndef create_training_sim(num_worlds: int, exec_mode, gpu_id: int = -1) -> SimInterface:\n    \"\"\"Create simulator for training with 128x1 horizontal lidar depth.\"\"\"\n    # Use the 128x1 horizontal lidar depth sensor\n    depth_config = madrona_escape_room.sensor_config.SensorConfig.lidar_horizontal_128()\n\n    manager = madrona_escape_room.SimManager(\n        exec_mode=exec_mode,\n        gpu_id=gpu_id,\n        num_worlds=num_worlds,\n        rand_seed=42,\n        auto_reset=True,\n        **depth_config.to_manager_kwargs(),\n    )\n\n    return create_sim_interface(manager)\n"]]], 1757021669.1659439]], ["ChangeSet", ["Renaming <BEAM_64> to <CENTER>", [["ChangeContents", ["train_src/madrona_escape_room_learn/sim_interface_adapter.py", "\"\"\"\nSimple SimInterface adapter for Madrona escape room training.\n\"\"\"\n\nimport madrona_escape_room\n\nfrom .cfg import SimInterface\n\n\nclass DepthIndex:\n    \"\"\"Depth tensor indices for horizontal lidar\"\"\"\n\n    # For tensor shape [worlds, agents, height, width, channels]\n    HEIGHT_DIM = 2  # Height dimension index\n    WIDTH_DIM = 3  # Width dimension index (beam index)\n    CHANNEL_DIM = 4  # Channel dimension index\n\n    # For horizontal lidar [worlds, agents, 1, 128, 1]\n    LEFTMOST = 0  # First lidar beam (leftmost)\n    CENTER = 64  # Middle lidar beam (center)\n    BEAM_127 = 127  # Last lidar beam (rightmost)\n\n    @staticmethod\n    def beam_count():\n        \"\"\"Total number of lidar beams for horizontal lidar\"\"\"\n        return 128\n\n\nclass CompassIndex:\n    \"\"\"Compass tensor bucket indices (128-bucket one-hot encoding)\"\"\"\n\n    COMPASS_0 = 0  # First compass bucket (0/128)\n    COMPASS_64 = 64  # Middle compass bucket (64/128) - North\n    COMPASS_127 = 127  # Last compass bucket (127/128)\n\n    @staticmethod\n    def bucket_count():\n        \"\"\"Total number of compass buckets\"\"\"\n        return 128\n\n\nclass SelfObsIndex:\n    \"\"\"Indices for self observation tensor components\"\"\"\n\n    X = 0  # Position X coordinate\n    Y = 1  # Position Y coordinate\n    Z = 2  # Position Z coordinate\n    PROGRESS = 3  # Progress (maxY reached)\n    ROTATION = 4  # Agent rotation\n\n\nclass ObsIndex:\n    \"\"\"Observation tensor indices for SimInterface.obs list\"\"\"\n\n    SELF_OBS = 0  # Self observation tensor [worlds, agents, 5]\n    COMPASS = 1  # Compass tensor [worlds, agents, 128]\n    DEPTH = 2  # Depth tensor [worlds, agents, height, width, channels]\n\n\ndef create_sim_interface(manager: madrona_escape_room.SimManager) -> SimInterface:\n    \"\"\"Create SimInterface from SimManager with live tensor references.\"\"\"\n\n    return SimInterface(\n        step=manager.step,\n        obs=[\n            manager.self_observation_tensor().to_torch(),  # [worlds, agents, 5]\n            manager.compass_tensor().to_torch(),  # [worlds, agents, 128]\n            manager.depth_tensor().to_torch(),  # [worlds, agents, 128, 1]\n        ],\n        actions=manager.action_tensor().to_torch(),  # [worlds, 3]\n        dones=manager.done_tensor().to_torch(),  # [worlds, agents, 1]\n        rewards=manager.reward_tensor().to_torch(),  # [worlds, agents, 1]\n    )\n\n\ndef create_training_sim(num_worlds: int, exec_mode, gpu_id: int = -1) -> SimInterface:\n    \"\"\"Create simulator for training with 128x1 horizontal lidar depth.\"\"\"\n    # Use the 128x1 horizontal lidar depth sensor\n    depth_config = madrona_escape_room.sensor_config.SensorConfig.lidar_horizontal_128()\n\n    manager = madrona_escape_room.SimManager(\n        exec_mode=exec_mode,\n        gpu_id=gpu_id,\n        num_worlds=num_worlds,\n        rand_seed=42,\n        auto_reset=True,\n        **depth_config.to_manager_kwargs(),\n    )\n\n    return create_sim_interface(manager)\n", "\"\"\"\nSimple SimInterface adapter for Madrona escape room training.\n\"\"\"\n\nimport madrona_escape_room\n\nfrom .cfg import SimInterface\n\n\nclass DepthIndex:\n    \"\"\"Depth tensor indices for horizontal lidar\"\"\"\n\n    # For tensor shape [worlds, agents, height, width, channels]\n    HEIGHT_DIM = 2  # Height dimension index\n    WIDTH_DIM = 3  # Width dimension index (beam index)\n    CHANNEL_DIM = 4  # Channel dimension index\n\n    # For horizontal lidar [worlds, agents, 1, 128, 1]\n    LEFTMOST = 0  # First lidar beam (leftmost)\n    BEAM_64 = 64  # Middle lidar beam (center)\n    BEAM_127 = 127  # Last lidar beam (rightmost)\n\n    @staticmethod\n    def beam_count():\n        \"\"\"Total number of lidar beams for horizontal lidar\"\"\"\n        return 128\n\n\nclass CompassIndex:\n    \"\"\"Compass tensor bucket indices (128-bucket one-hot encoding)\"\"\"\n\n    COMPASS_0 = 0  # First compass bucket (0/128)\n    COMPASS_64 = 64  # Middle compass bucket (64/128) - North\n    COMPASS_127 = 127  # Last compass bucket (127/128)\n\n    @staticmethod\n    def bucket_count():\n        \"\"\"Total number of compass buckets\"\"\"\n        return 128\n\n\nclass SelfObsIndex:\n    \"\"\"Indices for self observation tensor components\"\"\"\n\n    X = 0  # Position X coordinate\n    Y = 1  # Position Y coordinate\n    Z = 2  # Position Z coordinate\n    PROGRESS = 3  # Progress (maxY reached)\n    ROTATION = 4  # Agent rotation\n\n\nclass ObsIndex:\n    \"\"\"Observation tensor indices for SimInterface.obs list\"\"\"\n\n    SELF_OBS = 0  # Self observation tensor [worlds, agents, 5]\n    COMPASS = 1  # Compass tensor [worlds, agents, 128]\n    DEPTH = 2  # Depth tensor [worlds, agents, height, width, channels]\n\n\ndef create_sim_interface(manager: madrona_escape_room.SimManager) -> SimInterface:\n    \"\"\"Create SimInterface from SimManager with live tensor references.\"\"\"\n\n    return SimInterface(\n        step=manager.step,\n        obs=[\n            manager.self_observation_tensor().to_torch(),  # [worlds, agents, 5]\n            manager.compass_tensor().to_torch(),  # [worlds, agents, 128]\n            manager.depth_tensor().to_torch(),  # [worlds, agents, 128, 1]\n        ],\n        actions=manager.action_tensor().to_torch(),  # [worlds, 3]\n        dones=manager.done_tensor().to_torch(),  # [worlds, agents, 1]\n        rewards=manager.reward_tensor().to_torch(),  # [worlds, agents, 1]\n    )\n\n\ndef create_training_sim(num_worlds: int, exec_mode, gpu_id: int = -1) -> SimInterface:\n    \"\"\"Create simulator for training with 128x1 horizontal lidar depth.\"\"\"\n    # Use the 128x1 horizontal lidar depth sensor\n    depth_config = madrona_escape_room.sensor_config.SensorConfig.lidar_horizontal_128()\n\n    manager = madrona_escape_room.SimManager(\n        exec_mode=exec_mode,\n        gpu_id=gpu_id,\n        num_worlds=num_worlds,\n        rand_seed=42,\n        auto_reset=True,\n        **depth_config.to_manager_kwargs(),\n    )\n\n    return create_sim_interface(manager)\n"]]], 1757021669.1844404]], ["ChangeSet", ["Renaming <BEAM_127> to <RIGHTMOST>", [["ChangeContents", ["train_src/madrona_escape_room_learn/sim_interface_adapter.py", "\"\"\"\nSimple SimInterface adapter for Madrona escape room training.\n\"\"\"\n\nimport madrona_escape_room\n\nfrom .cfg import SimInterface\n\n\nclass DepthIndex:\n    \"\"\"Depth tensor indices for horizontal lidar\"\"\"\n\n    # For tensor shape [worlds, agents, height, width, channels]\n    HEIGHT_DIM = 2  # Height dimension index\n    WIDTH_DIM = 3  # Width dimension index (beam index)\n    CHANNEL_DIM = 4  # Channel dimension index\n\n    # For horizontal lidar [worlds, agents, 1, 128, 1]\n    LEFTMOST = 0  # First lidar beam (leftmost)\n    CENTER = 64  # Middle lidar beam (center)\n    RIGHTMOST = 127  # Last lidar beam (rightmost)\n\n    @staticmethod\n    def beam_count():\n        \"\"\"Total number of lidar beams for horizontal lidar\"\"\"\n        return 128\n\n\nclass CompassIndex:\n    \"\"\"Compass tensor bucket indices (128-bucket one-hot encoding)\"\"\"\n\n    COMPASS_0 = 0  # First compass bucket (0/128)\n    COMPASS_64 = 64  # Middle compass bucket (64/128) - North\n    COMPASS_127 = 127  # Last compass bucket (127/128)\n\n    @staticmethod\n    def bucket_count():\n        \"\"\"Total number of compass buckets\"\"\"\n        return 128\n\n\nclass SelfObsIndex:\n    \"\"\"Indices for self observation tensor components\"\"\"\n\n    X = 0  # Position X coordinate\n    Y = 1  # Position Y coordinate\n    Z = 2  # Position Z coordinate\n    PROGRESS = 3  # Progress (maxY reached)\n    ROTATION = 4  # Agent rotation\n\n\nclass ObsIndex:\n    \"\"\"Observation tensor indices for SimInterface.obs list\"\"\"\n\n    SELF_OBS = 0  # Self observation tensor [worlds, agents, 5]\n    COMPASS = 1  # Compass tensor [worlds, agents, 128]\n    DEPTH = 2  # Depth tensor [worlds, agents, height, width, channels]\n\n\ndef create_sim_interface(manager: madrona_escape_room.SimManager) -> SimInterface:\n    \"\"\"Create SimInterface from SimManager with live tensor references.\"\"\"\n\n    return SimInterface(\n        step=manager.step,\n        obs=[\n            manager.self_observation_tensor().to_torch(),  # [worlds, agents, 5]\n            manager.compass_tensor().to_torch(),  # [worlds, agents, 128]\n            manager.depth_tensor().to_torch(),  # [worlds, agents, 128, 1]\n        ],\n        actions=manager.action_tensor().to_torch(),  # [worlds, 3]\n        dones=manager.done_tensor().to_torch(),  # [worlds, agents, 1]\n        rewards=manager.reward_tensor().to_torch(),  # [worlds, agents, 1]\n    )\n\n\ndef create_training_sim(num_worlds: int, exec_mode, gpu_id: int = -1) -> SimInterface:\n    \"\"\"Create simulator for training with 128x1 horizontal lidar depth.\"\"\"\n    # Use the 128x1 horizontal lidar depth sensor\n    depth_config = madrona_escape_room.sensor_config.SensorConfig.lidar_horizontal_128()\n\n    manager = madrona_escape_room.SimManager(\n        exec_mode=exec_mode,\n        gpu_id=gpu_id,\n        num_worlds=num_worlds,\n        rand_seed=42,\n        auto_reset=True,\n        **depth_config.to_manager_kwargs(),\n    )\n\n    return create_sim_interface(manager)\n", "\"\"\"\nSimple SimInterface adapter for Madrona escape room training.\n\"\"\"\n\nimport madrona_escape_room\n\nfrom .cfg import SimInterface\n\n\nclass DepthIndex:\n    \"\"\"Depth tensor indices for horizontal lidar\"\"\"\n\n    # For tensor shape [worlds, agents, height, width, channels]\n    HEIGHT_DIM = 2  # Height dimension index\n    WIDTH_DIM = 3  # Width dimension index (beam index)\n    CHANNEL_DIM = 4  # Channel dimension index\n\n    # For horizontal lidar [worlds, agents, 1, 128, 1]\n    LEFTMOST = 0  # First lidar beam (leftmost)\n    CENTER = 64  # Middle lidar beam (center)\n    BEAM_127 = 127  # Last lidar beam (rightmost)\n\n    @staticmethod\n    def beam_count():\n        \"\"\"Total number of lidar beams for horizontal lidar\"\"\"\n        return 128\n\n\nclass CompassIndex:\n    \"\"\"Compass tensor bucket indices (128-bucket one-hot encoding)\"\"\"\n\n    COMPASS_0 = 0  # First compass bucket (0/128)\n    COMPASS_64 = 64  # Middle compass bucket (64/128) - North\n    COMPASS_127 = 127  # Last compass bucket (127/128)\n\n    @staticmethod\n    def bucket_count():\n        \"\"\"Total number of compass buckets\"\"\"\n        return 128\n\n\nclass SelfObsIndex:\n    \"\"\"Indices for self observation tensor components\"\"\"\n\n    X = 0  # Position X coordinate\n    Y = 1  # Position Y coordinate\n    Z = 2  # Position Z coordinate\n    PROGRESS = 3  # Progress (maxY reached)\n    ROTATION = 4  # Agent rotation\n\n\nclass ObsIndex:\n    \"\"\"Observation tensor indices for SimInterface.obs list\"\"\"\n\n    SELF_OBS = 0  # Self observation tensor [worlds, agents, 5]\n    COMPASS = 1  # Compass tensor [worlds, agents, 128]\n    DEPTH = 2  # Depth tensor [worlds, agents, height, width, channels]\n\n\ndef create_sim_interface(manager: madrona_escape_room.SimManager) -> SimInterface:\n    \"\"\"Create SimInterface from SimManager with live tensor references.\"\"\"\n\n    return SimInterface(\n        step=manager.step,\n        obs=[\n            manager.self_observation_tensor().to_torch(),  # [worlds, agents, 5]\n            manager.compass_tensor().to_torch(),  # [worlds, agents, 128]\n            manager.depth_tensor().to_torch(),  # [worlds, agents, 128, 1]\n        ],\n        actions=manager.action_tensor().to_torch(),  # [worlds, 3]\n        dones=manager.done_tensor().to_torch(),  # [worlds, agents, 1]\n        rewards=manager.reward_tensor().to_torch(),  # [worlds, agents, 1]\n    )\n\n\ndef create_training_sim(num_worlds: int, exec_mode, gpu_id: int = -1) -> SimInterface:\n    \"\"\"Create simulator for training with 128x1 horizontal lidar depth.\"\"\"\n    # Use the 128x1 horizontal lidar depth sensor\n    depth_config = madrona_escape_room.sensor_config.SensorConfig.lidar_horizontal_128()\n\n    manager = madrona_escape_room.SimManager(\n        exec_mode=exec_mode,\n        gpu_id=gpu_id,\n        num_worlds=num_worlds,\n        rand_seed=42,\n        auto_reset=True,\n        **depth_config.to_manager_kwargs(),\n    )\n\n    return create_sim_interface(manager)\n"]]], 1757021669.202812]], ["ChangeSet", ["Renaming <COMPASS_0> to <FIRST>", [["ChangeContents", ["train_src/madrona_escape_room_learn/sim_interface_adapter.py", "\"\"\"\nSimple SimInterface adapter for Madrona escape room training.\n\"\"\"\n\nimport madrona_escape_room\n\nfrom .cfg import SimInterface\n\n\nclass DepthIndex:\n    \"\"\"Depth tensor indices for horizontal lidar\"\"\"\n\n    # For tensor shape [worlds, agents, height, width, channels]\n    HEIGHT_DIM = 2  # Height dimension index\n    WIDTH_DIM = 3  # Width dimension index (beam index)\n    CHANNEL_DIM = 4  # Channel dimension index\n\n    # For horizontal lidar [worlds, agents, 1, 128, 1]\n    LEFTMOST = 0  # First lidar beam (leftmost)\n    CENTER = 64  # Middle lidar beam (center)\n    RIGHTMOST = 127  # Last lidar beam (rightmost)\n\n    @staticmethod\n    def beam_count():\n        \"\"\"Total number of lidar beams for horizontal lidar\"\"\"\n        return 128\n\n\nclass CompassIndex:\n    \"\"\"Compass tensor bucket indices (128-bucket one-hot encoding)\"\"\"\n\n    FIRST = 0  # First compass bucket (0/128)\n    COMPASS_64 = 64  # Middle compass bucket (64/128) - North\n    COMPASS_127 = 127  # Last compass bucket (127/128)\n\n    @staticmethod\n    def bucket_count():\n        \"\"\"Total number of compass buckets\"\"\"\n        return 128\n\n\nclass SelfObsIndex:\n    \"\"\"Indices for self observation tensor components\"\"\"\n\n    X = 0  # Position X coordinate\n    Y = 1  # Position Y coordinate\n    Z = 2  # Position Z coordinate\n    PROGRESS = 3  # Progress (maxY reached)\n    ROTATION = 4  # Agent rotation\n\n\nclass ObsIndex:\n    \"\"\"Observation tensor indices for SimInterface.obs list\"\"\"\n\n    SELF_OBS = 0  # Self observation tensor [worlds, agents, 5]\n    COMPASS = 1  # Compass tensor [worlds, agents, 128]\n    DEPTH = 2  # Depth tensor [worlds, agents, height, width, channels]\n\n\ndef create_sim_interface(manager: madrona_escape_room.SimManager) -> SimInterface:\n    \"\"\"Create SimInterface from SimManager with live tensor references.\"\"\"\n\n    return SimInterface(\n        step=manager.step,\n        obs=[\n            manager.self_observation_tensor().to_torch(),  # [worlds, agents, 5]\n            manager.compass_tensor().to_torch(),  # [worlds, agents, 128]\n            manager.depth_tensor().to_torch(),  # [worlds, agents, 128, 1]\n        ],\n        actions=manager.action_tensor().to_torch(),  # [worlds, 3]\n        dones=manager.done_tensor().to_torch(),  # [worlds, agents, 1]\n        rewards=manager.reward_tensor().to_torch(),  # [worlds, agents, 1]\n    )\n\n\ndef create_training_sim(num_worlds: int, exec_mode, gpu_id: int = -1) -> SimInterface:\n    \"\"\"Create simulator for training with 128x1 horizontal lidar depth.\"\"\"\n    # Use the 128x1 horizontal lidar depth sensor\n    depth_config = madrona_escape_room.sensor_config.SensorConfig.lidar_horizontal_128()\n\n    manager = madrona_escape_room.SimManager(\n        exec_mode=exec_mode,\n        gpu_id=gpu_id,\n        num_worlds=num_worlds,\n        rand_seed=42,\n        auto_reset=True,\n        **depth_config.to_manager_kwargs(),\n    )\n\n    return create_sim_interface(manager)\n", "\"\"\"\nSimple SimInterface adapter for Madrona escape room training.\n\"\"\"\n\nimport madrona_escape_room\n\nfrom .cfg import SimInterface\n\n\nclass DepthIndex:\n    \"\"\"Depth tensor indices for horizontal lidar\"\"\"\n\n    # For tensor shape [worlds, agents, height, width, channels]\n    HEIGHT_DIM = 2  # Height dimension index\n    WIDTH_DIM = 3  # Width dimension index (beam index)\n    CHANNEL_DIM = 4  # Channel dimension index\n\n    # For horizontal lidar [worlds, agents, 1, 128, 1]\n    LEFTMOST = 0  # First lidar beam (leftmost)\n    CENTER = 64  # Middle lidar beam (center)\n    RIGHTMOST = 127  # Last lidar beam (rightmost)\n\n    @staticmethod\n    def beam_count():\n        \"\"\"Total number of lidar beams for horizontal lidar\"\"\"\n        return 128\n\n\nclass CompassIndex:\n    \"\"\"Compass tensor bucket indices (128-bucket one-hot encoding)\"\"\"\n\n    COMPASS_0 = 0  # First compass bucket (0/128)\n    COMPASS_64 = 64  # Middle compass bucket (64/128) - North\n    COMPASS_127 = 127  # Last compass bucket (127/128)\n\n    @staticmethod\n    def bucket_count():\n        \"\"\"Total number of compass buckets\"\"\"\n        return 128\n\n\nclass SelfObsIndex:\n    \"\"\"Indices for self observation tensor components\"\"\"\n\n    X = 0  # Position X coordinate\n    Y = 1  # Position Y coordinate\n    Z = 2  # Position Z coordinate\n    PROGRESS = 3  # Progress (maxY reached)\n    ROTATION = 4  # Agent rotation\n\n\nclass ObsIndex:\n    \"\"\"Observation tensor indices for SimInterface.obs list\"\"\"\n\n    SELF_OBS = 0  # Self observation tensor [worlds, agents, 5]\n    COMPASS = 1  # Compass tensor [worlds, agents, 128]\n    DEPTH = 2  # Depth tensor [worlds, agents, height, width, channels]\n\n\ndef create_sim_interface(manager: madrona_escape_room.SimManager) -> SimInterface:\n    \"\"\"Create SimInterface from SimManager with live tensor references.\"\"\"\n\n    return SimInterface(\n        step=manager.step,\n        obs=[\n            manager.self_observation_tensor().to_torch(),  # [worlds, agents, 5]\n            manager.compass_tensor().to_torch(),  # [worlds, agents, 128]\n            manager.depth_tensor().to_torch(),  # [worlds, agents, 128, 1]\n        ],\n        actions=manager.action_tensor().to_torch(),  # [worlds, 3]\n        dones=manager.done_tensor().to_torch(),  # [worlds, agents, 1]\n        rewards=manager.reward_tensor().to_torch(),  # [worlds, agents, 1]\n    )\n\n\ndef create_training_sim(num_worlds: int, exec_mode, gpu_id: int = -1) -> SimInterface:\n    \"\"\"Create simulator for training with 128x1 horizontal lidar depth.\"\"\"\n    # Use the 128x1 horizontal lidar depth sensor\n    depth_config = madrona_escape_room.sensor_config.SensorConfig.lidar_horizontal_128()\n\n    manager = madrona_escape_room.SimManager(\n        exec_mode=exec_mode,\n        gpu_id=gpu_id,\n        num_worlds=num_worlds,\n        rand_seed=42,\n        auto_reset=True,\n        **depth_config.to_manager_kwargs(),\n    )\n\n    return create_sim_interface(manager)\n"]]], 1757021909.5728045]], ["ChangeSet", ["Renaming <COMPASS_127> to <LAST>", [["ChangeContents", ["train_src/madrona_escape_room_learn/sim_interface_adapter.py", "\"\"\"\nSimple SimInterface adapter for Madrona escape room training.\n\"\"\"\n\nimport madrona_escape_room\n\nfrom .cfg import SimInterface\n\n\nclass DepthIndex:\n    \"\"\"Depth tensor indices for horizontal lidar\"\"\"\n\n    # For tensor shape [worlds, agents, height, width, channels]\n    HEIGHT_DIM = 2  # Height dimension index\n    WIDTH_DIM = 3  # Width dimension index (beam index)\n    CHANNEL_DIM = 4  # Channel dimension index\n\n    # For horizontal lidar [worlds, agents, 1, 128, 1]\n    LEFTMOST = 0  # First lidar beam (leftmost)\n    CENTER = 64  # Middle lidar beam (center)\n    RIGHTMOST = 127  # Last lidar beam (rightmost)\n\n    @staticmethod\n    def beam_count():\n        \"\"\"Total number of lidar beams for horizontal lidar\"\"\"\n        return 128\n\n\nclass CompassIndex:\n    \"\"\"Compass tensor bucket indices (128-bucket one-hot encoding)\"\"\"\n\n    FIRST = 0  # First compass bucket (0/128)\n    COMPASS_64 = 64  # Middle compass bucket (64/128) - North\n    LAST = 127  # Last compass bucket (127/128)\n\n    @staticmethod\n    def bucket_count():\n        \"\"\"Total number of compass buckets\"\"\"\n        return 128\n\n\nclass SelfObsIndex:\n    \"\"\"Indices for self observation tensor components\"\"\"\n\n    X = 0  # Position X coordinate\n    Y = 1  # Position Y coordinate\n    Z = 2  # Position Z coordinate\n    PROGRESS = 3  # Progress (maxY reached)\n    ROTATION = 4  # Agent rotation\n\n\nclass ObsIndex:\n    \"\"\"Observation tensor indices for SimInterface.obs list\"\"\"\n\n    SELF_OBS = 0  # Self observation tensor [worlds, agents, 5]\n    COMPASS = 1  # Compass tensor [worlds, agents, 128]\n    DEPTH = 2  # Depth tensor [worlds, agents, height, width, channels]\n\n\ndef create_sim_interface(manager: madrona_escape_room.SimManager) -> SimInterface:\n    \"\"\"Create SimInterface from SimManager with live tensor references.\"\"\"\n\n    return SimInterface(\n        step=manager.step,\n        obs=[\n            manager.self_observation_tensor().to_torch(),  # [worlds, agents, 5]\n            manager.compass_tensor().to_torch(),  # [worlds, agents, 128]\n            manager.depth_tensor().to_torch(),  # [worlds, agents, 128, 1]\n        ],\n        actions=manager.action_tensor().to_torch(),  # [worlds, 3]\n        dones=manager.done_tensor().to_torch(),  # [worlds, agents, 1]\n        rewards=manager.reward_tensor().to_torch(),  # [worlds, agents, 1]\n    )\n\n\ndef create_training_sim(num_worlds: int, exec_mode, gpu_id: int = -1) -> SimInterface:\n    \"\"\"Create simulator for training with 128x1 horizontal lidar depth.\"\"\"\n    # Use the 128x1 horizontal lidar depth sensor\n    depth_config = madrona_escape_room.sensor_config.SensorConfig.lidar_horizontal_128()\n\n    manager = madrona_escape_room.SimManager(\n        exec_mode=exec_mode,\n        gpu_id=gpu_id,\n        num_worlds=num_worlds,\n        rand_seed=42,\n        auto_reset=True,\n        **depth_config.to_manager_kwargs(),\n    )\n\n    return create_sim_interface(manager)\n", "\"\"\"\nSimple SimInterface adapter for Madrona escape room training.\n\"\"\"\n\nimport madrona_escape_room\n\nfrom .cfg import SimInterface\n\n\nclass DepthIndex:\n    \"\"\"Depth tensor indices for horizontal lidar\"\"\"\n\n    # For tensor shape [worlds, agents, height, width, channels]\n    HEIGHT_DIM = 2  # Height dimension index\n    WIDTH_DIM = 3  # Width dimension index (beam index)\n    CHANNEL_DIM = 4  # Channel dimension index\n\n    # For horizontal lidar [worlds, agents, 1, 128, 1]\n    LEFTMOST = 0  # First lidar beam (leftmost)\n    CENTER = 64  # Middle lidar beam (center)\n    RIGHTMOST = 127  # Last lidar beam (rightmost)\n\n    @staticmethod\n    def beam_count():\n        \"\"\"Total number of lidar beams for horizontal lidar\"\"\"\n        return 128\n\n\nclass CompassIndex:\n    \"\"\"Compass tensor bucket indices (128-bucket one-hot encoding)\"\"\"\n\n    FIRST = 0  # First compass bucket (0/128)\n    COMPASS_64 = 64  # Middle compass bucket (64/128) - North\n    COMPASS_127 = 127  # Last compass bucket (127/128)\n\n    @staticmethod\n    def bucket_count():\n        \"\"\"Total number of compass buckets\"\"\"\n        return 128\n\n\nclass SelfObsIndex:\n    \"\"\"Indices for self observation tensor components\"\"\"\n\n    X = 0  # Position X coordinate\n    Y = 1  # Position Y coordinate\n    Z = 2  # Position Z coordinate\n    PROGRESS = 3  # Progress (maxY reached)\n    ROTATION = 4  # Agent rotation\n\n\nclass ObsIndex:\n    \"\"\"Observation tensor indices for SimInterface.obs list\"\"\"\n\n    SELF_OBS = 0  # Self observation tensor [worlds, agents, 5]\n    COMPASS = 1  # Compass tensor [worlds, agents, 128]\n    DEPTH = 2  # Depth tensor [worlds, agents, height, width, channels]\n\n\ndef create_sim_interface(manager: madrona_escape_room.SimManager) -> SimInterface:\n    \"\"\"Create SimInterface from SimManager with live tensor references.\"\"\"\n\n    return SimInterface(\n        step=manager.step,\n        obs=[\n            manager.self_observation_tensor().to_torch(),  # [worlds, agents, 5]\n            manager.compass_tensor().to_torch(),  # [worlds, agents, 128]\n            manager.depth_tensor().to_torch(),  # [worlds, agents, 128, 1]\n        ],\n        actions=manager.action_tensor().to_torch(),  # [worlds, 3]\n        dones=manager.done_tensor().to_torch(),  # [worlds, agents, 1]\n        rewards=manager.reward_tensor().to_torch(),  # [worlds, agents, 1]\n    )\n\n\ndef create_training_sim(num_worlds: int, exec_mode, gpu_id: int = -1) -> SimInterface:\n    \"\"\"Create simulator for training with 128x1 horizontal lidar depth.\"\"\"\n    # Use the 128x1 horizontal lidar depth sensor\n    depth_config = madrona_escape_room.sensor_config.SensorConfig.lidar_horizontal_128()\n\n    manager = madrona_escape_room.SimManager(\n        exec_mode=exec_mode,\n        gpu_id=gpu_id,\n        num_worlds=num_worlds,\n        rand_seed=42,\n        auto_reset=True,\n        **depth_config.to_manager_kwargs(),\n    )\n\n    return create_sim_interface(manager)\n"]]], 1757021909.5902655]]], []]